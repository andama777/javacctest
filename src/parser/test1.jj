/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. test1.jj */
/*@egen*//** \u7e67\uff6a\u7e5d\u52b1\u3059\u7e5d\uff67\u7e5d\uff73 */
options {
    /* parser\u7e67\u65ador\u8b41\ufffd\u7e3a\uff6a\u7e3a\uff69\u7e3a\uff67\u90e2\uff70\u7e67\u9858\uff7f\u6590\uff20\u83f4\uff7f\u7e3a\ufffd\u7e3a\uff6a\u7e67\u6620alse\u7e3a\uff6b\u7e3a\u5436\uff4b */
    STATIC = false;
    UNICODE_INPUT = false; // \u8b4c\uff65\u8b5b\uff6c\u96b1\u69ed\uff52\u9697\uff63\u8b6b\u820c\uff20\u7e3a\u6e98\u00b0\u7e3a\uff63\u7e3a\u6e98\uff49true
}

/** Parser\u7e67\uff6f\u7e5d\uff69\u7e67\uff79\u7e3a\uff6e\u87b3\u5902\uff7e\uff69 */
PARSER_BEGIN(MyParser)
package parser;

import java.util.ArrayList;
import java.util.Iterator;

import test.BNF.*;

public class MyParser/*@bgen(jjtree)*/implements MyParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTMyParserState jjtree = new JJTMyParserState();

/*@egen*/
    /* \u7e3a\u8599\uff05\u7e3a\uff6b\ufffd\uff7c\u68a7\u52f8\u9a3e\u58f9\ufffd\uff6eJava\u7e67\uff6f\u7e5d\uff69\u7e67\uff79\u7e3a\uff6e\u7e67\u533b\u2267\u7e3a\uff6b\u7e5d\uff61\u7e67\uff7d\u7e5d\ufffd\u7e5d\u5ce8\uff52\u87b3\u5902\uff7e\uff69\u7e3a\uff67\u7e3a\u962a\uff4b\u7e3a\uff63\u7e3a\uff7d\u7e3a\ufffd */
	public static void write(String str) {
	  System.out.println(str);
	}

	public void write(ArrayList<String> codes) {
	  for(Iterator it = codes.iterator(); it.hasNext();) {
	    System.out.println(it.next());
	  }
	}

//	public void write(ArrayList<Token> tokens) {
//	  for(Iterator it = tokens.iterator(); it.hasNext();) {
//	    System.out.println(it.next().toString());
//	  }
//	}
}

PARSER_END(MyParser)
/** \u7e3a\u8599\uff05\u7e3a\uff7e\u7e3a\uff67\u7e3a\u8a13arser\u7e67\uff6f\u7e5d\uff69\u7e67\uff79\u7e3a\uff6e\u87b3\u5902\uff7e\uff69 */
/** \u8389\uff65\u8373\u4e5d\ufffd\uff6f\u8b41\ufffd\u8c55\u8f14\ufffd\uff6e\u87b3\u5902\uff7e\uff69 */

/** \u8f9f\uff61\u9695\u60b6\u2606\u7e67\u533a\u679a\u87c4\u52b1\uff52\u87b3\u5902\uff7e\uff69 */
SKIP:
{
    " " | "\r" | "\t" | "\n"
}

/** \u8703\uff7a\u8ff4\uff7e\u7e3a\u5436\uff4b\u7e5d\u533b\ufffd\uff7c\u7e67\uff6f\u7e5d\uff73\u7e67\u8c9e\uff6e\u5902\uff7e\uff69 */
TOKEN:
{
        <NUMBER: (["0"-"9"])+>				|
        <MAIN:	"Main" >					|
        <VOID:	"void" >					|
        <ADDOPE:	("+" | "-") >			|
        <MULOPE:	("*" | "/") >			
}

/** Parser\u7e3a\uff6e\u87b3\u6eaf\uff61\ufffd
 *  \u7e3a\u8599\ufffd\uff6e\u7e5d\uff61\u7e67\uff7d\u7e5d\ufffd\u7e5d\u5ce8\uff52Main.java\u7e3a\u4e5d\uff49\u873b\uff7c\u7e3a\uff73\u8703\uff7a\u7e3a\ufffd
 */

void program():
{/*@bgen(jjtree) program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  write("Program start:\t");
}{/*@bgen(jjtree) program */
        try {
/*@egen*/
  	(stmt())* <EOF>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
    	//System.out.println("Clear Registers:\t");
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void stmt():
{/*@bgen(jjtree) stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) stmt */
  try {
/*@egen*/
  expr1() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expr1():
{/*@bgen(jjtree) expr1 */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPR1);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Expr1 expr;
  	ArrayList<String> codes = new ArrayList<String>();
	ArrayList<Token> tokens = new ArrayList<Token>();
    Token t;
}{/*@bgen(jjtree) expr1 */
        try {
/*@egen*/
  // add_expr ::= Number() (AddOperator() Number())+
  	t = Number() {tokens.add(t); }(
  	  t = AddOperator() { tokens.add(t); }
  	  t = Number() { tokens.add(t); }
  	  )+/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{
  	    	//write(tokens);

	  	   	expr = new Expr1(tokens);
	  	   	codes = expr.genCode();
	  	   	write(codes);
  	   	
  	  
//  	  switch(ope.image) {
//  	    case "+":
//  	    	write("\tADD R1, R0;");
//  	    	break;
//  	    case "-":
//  	    	write("\tSUB R0, R1;");
//  	    	break;
//  	    default:
//  	    	write("\tNOP\t\t;");
//  	  }
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Token Number():{/*@bgen(jjtree) Number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token number;
}{/*@bgen(jjtree) Number */
  try {
/*@egen*/
  number = <NUMBER>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {
	//write("\tMOV #" + number.image + ", R0;");
	return number;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token AddOperator():{/*@bgen(jjtree) AddOperator */
  SimpleNode jjtn000 = new SimpleNode(JJTADDOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token operator;
}{/*@bgen(jjtree) AddOperator */
  try {
/*@egen*/
  operator = <ADDOPE>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {
    return operator;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}